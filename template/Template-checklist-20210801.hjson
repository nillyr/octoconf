# Syntax to be used
[
  {
    checkpoint_id: 1
    # The title will be used in the generated files
    title: This is a title
    description:
    '''
    This 
    is 
    a 
    multiline 
    description.
    '''
    /**
     * Expected: Bool
     * If the value is "false", the verification must be done manually and only the "checks" key doesn't have to be defined.
     */
    performable: true
    /**
     * How confident is the check performed?
     * Possible values:
     *  - certain (there is no doubt about the obtained result)
     *  - potential (must be checked manually to remove false positives)
     */
    confidence: certain
    # Optionnal value. Should be an URL
    reference: https://www.my-reference.com/
    /**
     * Expected level of security
     * Possible values:
     *  - Rx   state-of-the-art configuration
     *  - Rx-  alternative recommendation to Rx when an intermediate level is required
     *  - Rx-- alternative recommendation to Rx when a minimum level is required
     *  - Rx+  alternative recommendation to Rx when hardening is required
     *
     * Where 'Rx' is the checkpoint id
     */
    level: R1
    /**
     * List of actions performed in a sequential manner.
     * The first check (id: 0) is dedicated to extract the complete configuration in order to perform manual verifications.
     *
     * If a full extraction is not required, go directly to id 1.
     *
     * Performing the full extraction is highly recommended for collecting audit proof.
     */
    checks: [
      {
        id: 0
        output_path: "relative_path"
        output_file: "output.ext"
        cmd: "your_command > output_path/output_file"
      }
      {
        id: 1
        /**
         * Type of verification to be performed
         * Possible values:
         *  - exact match   expects a simple value
         *  - regex match   expects a python regular expression
         *    - see also: https://regex101.com/
         */
        verification_type: "exact match"
        # example (macOS - SIP): /usr/bin/csrutil status | tee status.log | grep enabled
        cmd: "your_command"
        # example: enabled
        expected: "expected_value"
      }
    ]
    /**
     * If the check failed, what is the severity level? Is it easilly exploitable?
     * Possible values:
     *  - high
     *  - medium
     *  - low
     *  - info
     */
    severity: medium
    recommandation:
    '''
    When the outcome is not what was expected, it is possible to print a recommendation.
    The recommendation may contain, among other things, the command for correction.
    '''
  }
]
